Resources:
  DeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        Prefix: ${self:custom.firehoseS3Prefix}
        ErrorOutputPrefix: error/
        BucketARN:
          'Fn::GetAtt': [DeliveryBucket, Arn]
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        CompressionFormat: ${self:custom.firehoseCompressionFormat}
        RoleARN:
          'Fn::GetAtt': [DeliveryStreamRole, Arn]
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: "deliveryStream"
          LogStreamName: "s3Delivery"
#        ProcessingConfiguration:
#          Enabled: true
#          Processors:
#            - Type: Lambda
#              Parameters:
#                - ParameterName: LambdaArn
#                  ParameterValue: !Sub "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:custom.stage}-StreamProcessor"
##                  ParameterValue: !GetAtt StreamProcessorLambdaFunction.Arn # this causes a cyclic dependency

  DeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [ firehose.amazonaws.com ] }
            Action: [ sts:AssumeRole ]
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - 's3:AbortMultipartUpload'
                - 's3:GetBucketLocation'
                - 's3:GetObject'
                - 's3:ListBucket'
                - 's3:ListBucketMultipartUploads'
                - 's3:PutObject'
              Resource:
                - { Fn::GetAtt: [ DeliveryBucket, Arn ] }
                - Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: DeliveryBucket
                    - '/*'

  AnalyticsResultStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        Prefix: ${self:custom.firehoseS3AnylticsResultsPrefix}
        ErrorOutputPrefix: error/
        BucketARN: !GetAtt AnalyticsBucket.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        CompressionFormat: ${self:custom.firehoseCompressionFormat}
        RoleARN: !GetAtt AnalyticsResultStreamRole.Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: "AnalyticsResultStream"
          LogStreamName: "s3Delivery"

  AnalyticsResultStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [ firehose.amazonaws.com ] }
            Action: [ sts:AssumeRole ]
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - 's3:AbortMultipartUpload'
                - 's3:GetBucketLocation'
                - 's3:GetObject'
                - 's3:ListBucket'
                - 's3:ListBucketMultipartUploads'
                - 's3:PutObject'
              Resource:
                - { Fn::GetAtt: [ AnalyticsBucket, Arn ] }
                - Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: AnalyticsBucket
                    - '/*'




